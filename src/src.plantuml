@startuml

title __SRC's Class Diagram__\n

  namespace  {
    abstract class Car {
        # trimFactor : double
        # turboOn : boolean
        + gas()
    }
  }
  

  namespace  {
    class CarController {
        ~ transports : ArrayList<Transport>
        - delay : int
        - timer : Timer
        + liftTruckBed()
        + lowerTruckBed()
        {static} + main()
        + startAllCarsEngine()
        + stopAllCarsEngine()
        + turnLeft()
        + turnRight()
        ~ brake()
        ~ gas()
        - changeDir()
        - isOutOfFrame()
    }
  }
  

  namespace  {
    class CarController.TimerListener {
        + actionPerformed()
    }
  }
  

  namespace  {
    class CarTruck {
        # cars : ArrayList<Car>
        # carsPosition : Double
        # storageMax : double
        + CarTruck()
        + addCar()
        + getCars()
        + getCarsPosition()
        + lowerTruckBed()
        + move()
        + raiseTruckBed()
        + speedFactor()
        + unloadTruck()
        - setCarsPosition()
    }
  }
  

  namespace  {
    class CarView {
        ~ addCarButton : JButton
        ~ brakeButton : JButton
        ~ controlPanel : JPanel
        ~ gasAmount : int
        ~ gasButton : JButton
        ~ gasLabel : JLabel
        ~ gasPanel : JPanel
        ~ gasSpinner : JSpinner
        ~ liftBedButton : JButton
        ~ lowerBedButton : JButton
        ~ removeCarButton : JButton
        ~ startButton : JButton
        ~ stopButton : JButton
        ~ turboOffButton : JButton
        ~ turboOnButton : JButton
        {static} - X : int
        {static} - Y : int
        + CarView()
        + getAddCarButton()
        + getBrakeButton()
        + getDrawPanel()
        + getGasAmount()
        + getGasButton()
        + getLiftBedButton()
        + getLowerBedButton()
        + getRemoveCarButton()
        + getStartButton()
        + getStopButton()
        + getTurboOffButton()
        + getTurboOnButton()
        - initComponents()
    }
  }
  

  namespace  {
    class DrawPanel {
        ~ point : Point
        ~ saabImage : BufferedImage
        ~ scaniaImage : BufferedImage
        ~ vehiclesToDraw : ArrayList<Transport>
        ~ volvoImage : BufferedImage
        + DrawPanel()
        + getVehiclesToDraw()
        + setVehiclesToDraw()
        # paintComponent()
        ~ moveit()
    }
  }
  

  namespace  {
    interface Movable {
        {abstract} + move()
        {abstract} + turnLeft()
        {abstract} + turnRight()
    }
  }
  

  namespace  {
    class Saab95 {
        + Saab95()
        + speedFactor()
        + turnTurboOff()
        + turnTurboOn()
    }
  }
  

  namespace  {
    class Scania {
        + Scania()
        + lowerTruckBed()
        + raiseTruckBed()
        + speedFactor()
    }
  }
  

  namespace  {
    interface Storage {
        {abstract} + addCar()
    }
  }
  

  namespace  {
    abstract class Transport {
        # color : Color
        # currentSpeed : double
        # direction : char
        # enginePower : double
        # modelName : String
        # nrDoors : int
        # point : Double
        # truckAngle : double
        + brake()
        + decrementSpeed()
        {abstract} + gas()
        + getColor()
        + getCurrentSpeed()
        + getDirection()
        + getEnginePower()
        + getNrDoors()
        + getPoint()
        + getType()
        + incrementSpeed()
        + move()
        + setColor()
        {abstract} + speedFactor()
        + startEngine()
        + stopEngine()
        + turnLeft()
        + turnRight()
    }
  }
  

  namespace  {
    enum StateEngine {
      STARTED
      STOPPED
      TRANSPORTING
    }
  }
  

  namespace  {
    abstract class Truck {
        + gas()
        + getAngle()
        + isRampDown()
        {abstract} + lowerTruckBed()
        {abstract} + raiseTruckBed()
    }
  }
  

  namespace  {
    enum StateRamp {
      DOWN
      UP
    }
  }
  

  namespace  {
    class Volvo240 {
        + Volvo240()
        + speedFactor()
    }
  }
  

  namespace  {
    class Workshop {
        # cars : ArrayList<Car>
        - storageMax : int
        + Workshop()
        + addCar()
        + checkOutCar()
        + getCarInfo()
        + getCars()
        # setCarsPosition()
    }
  }
  

  namespace  {
    enum typeOfCar {
      ALL
      SAAB
      SCANIA
      VOLVO
    }
  }
  

  Car -up-|> Transport
  CarController o-- CarView : frame
  CarController +-down- CarController.TimerListener
  CarController.TimerListener .up.|> java.awt.event.ActionListener
  CarTruck .up.|> Storage
  CarTruck -up-|> Truck
  CarView -up-|> javax.swing.JFrame
  CarView o-- CarController : carC
  CarView o-- DrawPanel : drawPanel
  DrawPanel -up-|> javax.swing.JPanel
  Saab95 -up-|> Car
  Scania -up-|> Truck
  Transport .up.|> Movable
  Transport o-- Truck.StateEngine : state
  Transport o-- Workshop.typeOfCar : type
  Transport +-down- Transport.StateEngine
  Truck -up-|> Transport
  Truck o-- Truck.StateRamp : stateRamp
  Truck +-down- Truck.StateRamp
  Volvo240 -up-|> Car
  Workshop .up.|> Storage
  Workshop o-- Workshop.typeOfCar : carType
  Workshop +-down- Workshop.typeOfCar


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
